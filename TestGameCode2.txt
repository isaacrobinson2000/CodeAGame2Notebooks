%%javascript
// Game code goes here....
class GameBlock extends GameCollisionObject {
    draw(canvas, painter, camera) {
        let [x, y, w, h] = camera.transformBox(this.getBoundingBox());
        painter.fillStyle = "red";
        painter.fillRect(x, y, w, h);
    }
    
    drawPreview(canvas, painter, box) {
        let [x, y, w, h] = box;
        painter.fillStyle = "red";
        painter.fillRect(x, y, w, h);
    }
}

class PhysicsObject extends GameCollisionObject {
    constructor(x, y, assets) {
        super(x, y, assets);
        this._gravity = 0.0001;
        this.vx = 0;
        this.vy = 0;
    }
    
    update(timeStep) {
        this.vy += this._gravity * timeStep;
        this.move(this.vx, this.vy);
    }

    handleCollision(otherObj, sideIdx, otherSideIdx, time) {
        this.vy *= Math.abs((this.$x - this.$px) - this.vx) > 1e-4;
        this.vx *= Math.abs((this.$y - this.$py) - this.vy) > 1e-4;
    }
}

class Entity extends PhysicsObject {
    draw(canvas, painter, camera) {
        let [x, y, w, h] = camera.transformBox(this.getBoundingBox());
        painter.fillStyle = "green";
        painter.fillRect(x, y, w, h);
    }
    
    drawPreview(canvas, painter, box) {
        let [x, y, w, h] = box;
        painter.fillStyle = "green";
        painter.fillRect(x, y, w, h);
    }
}

class Slope1 extends GameCollisionObject {
    constructor(x, y, assets) {
        super(x, y, assets);
        this.initPoints([[0, 1], [1, 1], [1, 0]]);
    }

    draw(canvas, painter, camera) {
        painter.fillStyle = "green";
        painter.beginPath();
        let i = 0;
        for(let [x, y] of camera.transformList(this.points.map((p) => [p[0] + this.$x, p[1] + this.$y]))) {
            if(i == 0) painter.moveTo(x, y);
            else painter.lineTo(x, y);
            i++;
        }
        painter.closePath();
        painter.fill();
    }
    
    drawPreview(canvas, painter, box) {
        let [x, y, w, h] = box;
        painter.fillStyle = "green";
        painter.beginPath();
        painter.moveTo(x, y + h);
        painter.lineTo(x + w, y + h);
        painter.lineTo(x + w, y);
        painter.closePath();
        painter.fill();
    }
}

class Player extends PhysicsObject {
    constructor(x, y, assets) {
        super(x, y, assets);
        this._priorUp = false;
        this._jumpCount = 2;
    }
    
    update(timeStep, gameState) {
        let keys = gameState.keysPressed;
        this.vx = 0;
        
        if("ArrowLeft" in keys) {
            this.vx -= 16.5 / 1000;
        }
        if("ArrowRight" in keys) {
            this.vx += 16.5 / 1000;
        }
        if(!this._priorUp && ("ArrowUp" in keys) && (this._jumpCount > 0)) {
            this.vy -= 40 / 1000;
            this._jumpCount -= 1;
        }
        this._priorUp = "ArrowUp" in keys;

        super.update(timeStep, gameState);
    }
    
    
    draw(canvas, painter, camera) {
        let [x, y, w, h] = camera.transformBox(this.getBoundingBox());
        painter.fillStyle = "blue";
        painter.fillRect(x, y, w, h);
    }
    
    drawPreview(canvas, painter, box) {
        let [x, y, w, h] = box;
        painter.fillStyle = "blue";
        painter.fillRect(x, y, w, h);
    }
    
    handleCollision(otherObj, sideIdx, otherSideIdx, time) {
        this._jumpCount = 2;
        super.handleCollision(otherObj, sideIdx, otherSideIdx, time);
    }
}

let gameInfo = {
    objects: {
        blocks: [GameBlock, Slope1],
        entities: [Entity],
        players: [Player]
    },
    assets: {
        sprites: {},
        sounds: {}
    },
    zones: {
        test: {
            zoneData: "testdata/dummy_level.json"
        },
    }
};

element.makeGame(gameInfo, "test"); 
